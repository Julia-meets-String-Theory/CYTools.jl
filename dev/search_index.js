var documenterSearchIndex = {"docs":
[{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"CurrentModule = CYTools","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Pages = [\"Introduction.md\"]","category":"page"},{"location":"CYTools/Introduction/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"CYTools/Introduction/#Goal","page":"Overview","title":"Goal","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"The package CYTools.jl aims towards making the entire functionality of the Python package CYTools available in Julia. We base this project on OSCAR for general functionality on toric spaces, polyhedral geometry etc. Specialized algorithms (for CICYs, 3 and 4-dimensional reflexive polytopes in the Kreuzer-Skarke list) will be collected in this Julia package.","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"As long as infrastructure/architecture is concerned, the goal is to write code which would eventually allow for a full-scale integration into OSCAR. Such an integration would have to be discussed in more detail once the time comes.","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"On the long run, a key step towards writing this package is to re-write core algorithm of the existing CYTools in a small and self-contained C++ project. Upon wrapping this code, this functionality can then be made available in Julia (but also in other languages, such as Python or other large software projects (Macaulay2, Sage,...) or commercial software such as Mathematica). This approach has the added advantage that large libraries (e.g. CGAL) need not be included. So this package should be slim and easily to install.","category":"page"},{"location":"CYTools/Introduction/#Status","page":"Overview","title":"Status","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"This project just began. We are currently in the process of initiating the code migration from CYTools. This we hope to yield a first functional Julia version by fall 2022. Further code optimization (in particular increased performance) is saved for a later stage of this project.","category":"page"},{"location":"CYTools/Introduction/#Installation-instructions-for-Linux","page":"Overview","title":"Installation instructions for Linux","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Install Julia on your computer. The latest version can be found here.\nDownload this development version of CYTools.jl. Those interested in contributing should instead clone this repository:","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"    git clone https://github.com/HereAround/CYTools.jl.git","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Place your clone/download in a location outside of the .julia folder of your home folder.\nFinally, register and build CYTools.jl as follows:","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"    using Pkg\n    Pkg.develop(path=\"path/to/your/CYTools.jl\")\n    Pkg.build(\"CYTools\")","category":"page"},{"location":"CYTools/Introduction/#Bugs-and-feature-requests","page":"Overview","title":"Bugs and feature requests","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"If you want to report a bug or request a feature, please do it by raising a github issue.","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"version","category":"page"},{"location":"CYTools/Introduction/#CYTools.version","page":"Overview","title":"CYTools.version","text":"version\n\nThe version number of the loaded CYTools. Please mention this number in any bug report.\n\n\n\n\n\n","category":"constant"},{"location":"CYTools/Introduction/#Contributions","page":"Overview","title":"Contributions","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Contributions are highly appreciated. Please notice that:","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Contributions must be done by opening a pull request.\nPull request must pass a number of checks that are automatically conducted by our test suite, before they can be merged. A further approval by a code owner is appreciated.\nCode is expected to be in agreement with the Oscar style guide.","category":"page"},{"location":"CYTools/Introduction/#Contact","page":"Overview","title":"Contact","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"This software is work in progress of","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"Martin Bies,\nViraf Mehta,\nAndres Rios Tascon.","category":"page"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"We use a slack-channel for general discussions. If you are interested in joining, please reach out to Viraf Mehta via  viraf.mehta@uni-goettingen.de for details.","category":"page"},{"location":"CYTools/Introduction/#Funding","page":"Overview","title":"Funding","text":"","category":"section"},{"location":"CYTools/Introduction/","page":"Overview","title":"Overview","text":"The work of Martin Bies is supported by the Simons Foundation Collaboration grant #390287 on Homological Mirror Symmetry and the Simons Foundation Collaboration grant #724069 on Special Holonomy in Geometry, Analysis and Physics.","category":"page"},{"location":"CYTools/CYHypersurfaces/","page":"Calabi-Yau hypersurfacse","title":"Calabi-Yau hypersurfacse","text":"CurrentModule = CYTools","category":"page"},{"location":"CYTools/CYHypersurfaces/","page":"Calabi-Yau hypersurfacse","title":"Calabi-Yau hypersurfacse","text":"Pages = [\"CYHypersurfaces.md\"]","category":"page"},{"location":"CYTools/CYHypersurfaces/#Calabi-Yau-hypersurfacse","page":"Calabi-Yau hypersurfacse","title":"Calabi-Yau hypersurfacse","text":"","category":"section"},{"location":"CYTools/CYHypersurfaces/#Constructors","page":"Calabi-Yau hypersurfacse","title":"Constructors","text":"","category":"section"},{"location":"CYTools/CYHypersurfaces/","page":"Calabi-Yau hypersurfacse","title":"Calabi-Yau hypersurfacse","text":"CYHypersurface(vertices::Matrix{Int})","category":"page"},{"location":"CYTools/CYHypersurfaces/#CYTools.CYHypersurface-Tuple{Matrix{Int64}}","page":"Calabi-Yau hypersurfacse","title":"CYTools.CYHypersurface","text":"CYHypersurface(vertices::Matrix{Int})\n\nConstruct the Calabi-Yau hypersurface in a normal toric variety with rays given as the vertices of a polytope.\n\nExamples\n\njulia> CYHypersurface([1 0; 0 1; -1 -1])\nA Calabi-Yau hypersurface\n\n\n\n","category":"method"},{"location":"CYTools/CYHypersurfaces/#Properties","page":"Calabi-Yau hypersurfacse","title":"Properties","text":"","category":"section"},{"location":"CYTools/CYHypersurfaces/","page":"Calabi-Yau hypersurfacse","title":"Calabi-Yau hypersurfacse","text":"polytope(cy::CYHypersurface)","category":"page"},{"location":"CYTools/CYHypersurfaces/#CYTools.polytope-Tuple{CYHypersurface}","page":"Calabi-Yau hypersurfacse","title":"CYTools.polytope","text":"polytope(cy::CYHypersurface)\n\nReturn the polytope of a Calabi-Yau hypersurface in a normal toric variety.\n\njulia> cy = CYHypersurface([1 0; 0 1; -1 -1])\nA Calabi-Yau hypersurface\n\njulia> p = polytope(cy)\nA polyhedron in ambient dimension 2\n\n\n\n","category":"method"},{"location":"#Welcome-to-CYTools","page":"Welcome to CYTools","title":"Welcome to CYTools","text":"","category":"section"},{"location":"CYTools/Utilities/","page":"Utilities","title":"Utilities","text":"CurrentModule = CYTools","category":"page"},{"location":"CYTools/Utilities/","page":"Utilities","title":"Utilities","text":"Pages = [\"Utilities.md\"]","category":"page"},{"location":"CYTools/Utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"CYTools/Utilities/#Reading-polytopes-from-the-Kreuzer-Skarke-database","page":"Utilities","title":"Reading polytopes from the Kreuzer-Skarke database","text":"","category":"section"},{"location":"CYTools/Utilities/","page":"Utilities","title":"Utilities","text":"read_polytopes(input::String; input_type::String=\"file\", format::String=\"ks\")\nfetch_polytopes(; h11::Union{Int, Nothing}=nothing, h12::Union{Int, Nothing}=nothing,\n                         h13::Union{Int, Nothing}=nothing, h22::Union{Int, Nothing}=nothing,\n                         chi::Union{Int, Nothing}=nothing, lattice::Union{Char, Nothing}=nothing,\n                         dim::Int=4, n_points::Union{Int, Nothing}=nothing,\n                         n_vertices::Union{Int, Nothing}=nothing, n_dual_points::Union{Int, Nothing}=nothing,\n                         n_facets::Union{Int, Nothing}=nothing, limit::Int=1000, timeout::Int=60, raw_output::Bool=false)","category":"page"},{"location":"CYTools/Utilities/#CYTools.read_polytopes-Tuple{String}","page":"Utilities","title":"CYTools.read_polytopes","text":"readpolytopes(input::String; inputtype::String=\"file\", format::String=\"ks\")\n\nRead the polytopes from a string or file. The parameter input can serve the input string or the filename depending on whether the keyword argument input_type is set to \"string\" or \"file\". Currently, only the format in the Kreuzer-Skarke database is supported, but in the future we may support weight systems.\n\nExamples\n\njulia> example_string = \"4 5  M:201 5 N:7 5 H:1,149 [-296]\\n1   1   1   1  -7\\n0   2   2   2  -6\\n0   0   8   0  -8\\n0   0   0   8  -8\";\n\njulia> polytopes = read_polytopes(example_string, input_type=\"string\");\n\njulia> length(polytopes)\n1\n\njulia> polytopes[1]\nA polyhedron in ambient dimension 4\n\n\n\n","category":"method"},{"location":"CYTools/Utilities/#CYTools.fetch_polytopes-Tuple{}","page":"Utilities","title":"CYTools.fetch_polytopes","text":"fetchpolytopes(; h11::Union{Int, Nothing}=nothing, h12::Union{Int, Nothing}=nothing,                          h13::Union{Int, Nothing}=nothing, h22::Union{Int, Nothing}=nothing,                          chi::Union{Int, Nothing}=nothing, lattice::Union{Char, Nothing}=nothing,                          dim::Int=4, npoints::Union{Int, Nothing}=nothing,                          nvertices::Union{Int, Nothing}=nothing, ndualpoints::Union{Int, Nothing}=nothing,                          nfacets::Union{Int, Nothing}=nothing, limit::Int=1000, timeout::Int=60, raw_output::Bool=false)\n\nFetch polytopes from the Kreuzer-Skarke database or the Schöller-Skarke database. The data is fetched from the websites http://hep.itp.tuwien.ac.at/~kreuzer/CY/ and http://rgc.itp.tuwien.ac.at/fourfolds/ respectively.\n\nSupported keyword arguments:\n\nh11::Int: Specifies the Hodge number h^11 of the Calabi-Yau hypersurface.\nh12::Int: Specifies the Hodge number h^12 of the Calabi-Yau hypersurface.\nh13::Int: Specifies the Hodge number h^13 of the Calabi-Yau hypersurface.\nh22::Int: Specifies the Hodge number h^22 of the Calabi-Yau hypersurface.\nchi::Int: Specifies the Euler characteristic of the Calabi-Yau hypersurface.\nlattice::Char: Specifies the lattice on which the polytope is defined. Options are 'N' and 'M'. Has to be specified if the Hodge numbers or the Euler characteristic is specified.\ndim::Int: The dimension of the polytope. The only available options are 4 and 5.\nn_points::Int: Specifies the number of lattice points of the desired polytopes.\nn_vertices::Int: Specifies the number of vertices of the desired polytopes.\nn_dual_points::Int: Specifies the number of points  of the dual polytopes of the desired polytopes.\nn_facets::Int: Specifies the number of facets of the desired polytopes.\nlimit::Int=1000: Specifies the maximum number of fetched polytopes.\ntimeout::Int=60: Specifies the maximum number of seconds to wait for the server to return the data.\nraw_output::Bool=false: Return the raw string obtained from the server.\n\nExamples\n\njulia> polytopes = fetch_polytopes(; h11=4, lattice='N', limit=5);\n\njulia> polytopes[1]\nA polyhedron in ambient dimension 4\n\njulia> length(polytopes)\n5\n\n\n\n","category":"method"}]
}
